<?php
/**
 * @file
 * Code for the OS Booklets feature.
 */

include_once 'os_booklets.features.inc';

/**
 * Implements hook_vsite_og_node_type_info().
 */
function os_booklets_vsite_og_node_type_info() {
  return array(
    'book' => 'group content',
  );
}

/**
 * Implements hook_form_FORM_ID_form_alter()
 *
 * Removes the book outline form from node types that aren't enabled to have it
 * Drupal core is backwards in this.
 *
 * It only checks if that node type is an allowed book type if the user fails all the book permissions
 */
function os_booklets_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  if (!book_type_is_allowed($node->type)) {
    unset($form['book']);
  }
}

/**
 * Implements hook_form_FORM_ID_form_alter() for book_node_form
 */
function os_booklets_form_book_node_form_alter(&$form, &$form_state, $form_id) {

  // TRUE when a new 'book' node is being added with no parent.
  $no_book_param = (!isset($_GET['parent']) || empty($_GET['parent']));
  $book_not_set = (!empty($form['book']));
  $is_new_node = (bool)(!$form['nid']['#value']);
  $new_book_root_mode = ($no_book_param && $book_not_set && $is_new_node);

  // TRUE when book node already exists, also when new 'book' node has a parent node specified.
  $book_is_set = (bool)(!empty($_GET['parent']) && !empty($form['book']));
  $existing_node = (bool)$form['nid']['#value'];
  $add_edit_child_mode = ($book_is_set || $existing_node);

  if ($new_book_root_mode) {
    // Hides book options and ensures new book is created on node save
    _os_booklets_book_root_form_alter($form);
  }

  else if ($add_edit_child_mode) {
    // Hides certain book settings and customize appearance on node edit form.
    _os_booklets_child_page_form_alter($form);
    // Filters book options by current space
    _os_booklets_option_filter_form_alter($form);
  }
}

/**
 * Implements hook_os_widget().
 *
 * Exposes blocks as OpenScholar widgets.
 */
function os_booklets_os_widget() {
  $items = array();

  // Displays "Archive" list of blog entry nodes by month
  $items['views-os_booklets-block'] = array(
      'module' => 'views',
      'delta' => 'os_booklets-block',
      'region' => 'sidebar_second',
      'weight' => '-10',
      'info' => 'Recent Documents'
  );

  return $items;
}

/**
 * Hides book options and ensures new book is created on node save.
 *
 * @param array $form
 *
 * @see os_booklets_form_book_node_form_alter()
 */
function _os_booklets_book_root_form_alter(&$form) {
  // Unsets visible book elements
  $remove = array(
    '#type', // => 'fieldset'
    '#title', // => 'Book outline'
    'bid', // array('#type' => 'select', ... )
    'weight', // array('#type' => 'select', ... )
  );

  foreach ($remove as $element) {
    unset($form['book'][$element]);
  }

  unset($form['book']['plid']['#prefix']);
  unset($form['book']['plid']['#suffix']);

  // Sets hidden values to create new book root
  $form['book']['bid']['#type'] = 'value';
  $form['book']['bid']['#value'] = 'new';

  $form['book']['weight']['#type'] = 'value';
  $form['book']['weight']['#value'] = 0;

  $form['title']['#title'] = t('Booklet Title');
}

/**
 * Hides certain book settings and customize appearance on node edit form.
 *
 * @param array $form
 *
 * @see os_booklets_form_book_node_form_alter()
 */
function _os_booklets_child_page_form_alter(&$form) {
  // Prevents users from creating a new book through this page.
  if (!empty($form['book']['bid']['#options'])) {
    unset($form['book']['bid']['#options']['new']);
  }

  // Prevents users from changing what book this page belongs to.
  $val = $form['book']['bid']['#default_value'];
  $form['book']['bid']['#type'] = 'value';
  $form['book']['bid']['#value'] = $val;

  // Prevents users from editting page weights
  $weight = $form['book']['weight']['#default_value'];
  unset($form['book']['weight']);
  $form['book']['weight']['#type'] = 'value';
  $form['book']['weight']['#value'] = $weight;

  // Expands book fieldset right above default node 'Additional settings' tabs
  $form['os_booklets'] = array(
    '#type' => 'vertical_tabs',
    '#weight' => 98,
  );
  $form['book']['#group'] = 'os_booklets';

  // Customize default book terminology and fieldset settings
  $form['title']['#title'] = t('Booklet page title');
  $form['book']['#weight'] = ! empty($form['body_field']['#weight']) ? $form['body_field']['#weight'] : 0;
  $form['book']['#title'] = t('Booklet information');
  $form['book']['#collapsible'] = TRUE;
  $form['book']['#collapsed'] = FALSE;
  $form['book']['#description'] =
      t('This page will be posted to booklet: <strong>!booklet</strong>',
      array(
        '!booklet' => $form['book']['bid']['#options'][$val],
      ));
  $form['book']['plid']['#description'] = t('Set the parent item of this page. Your selection will determine the place where this page will reside in this booklet\'s hierarchy. You can think of the booklet\'s hierarchy as the "table of contents" for your booklet. You could select the top-level booklet itself or another page within the booklet. The maximum depth for a booklet and all child pages is 9.');
}

/**
 * Allows users to select only books in current space, use EntityFieldQuery
 *
 * @param array $form
 *
 * @see _os_booklets_child_page_form_alter()
 * @see os_booklets_form_book_node_form_alter()
 */
function _os_booklets_option_filter_form_alter(&$form) {
  $space = spaces_get_space();
  if (!module_exists('vsite') || !$space) return;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'book')
    ->propertyCondition('status', 1)
    ->fieldCondition(OG_AUDIENCE_FIELD, 'target_id', $space->id);
  $result = $query->execute();
  if (!isset($result['node'])) return;

  $nids_in_current_space = array_keys($result['node']);

  // Removes options for books not in this space.
  foreach ($form['book']['bid']['#options'] as $key => $value) {
    if (is_numeric($key) && !isset($nids_in_current_space[$key])) {
      unset($form['book']['bid']['#options'][$key]);
    }
  }
}