<?php
/**
 * @file
 * Code for the OS Software feature.
 */

include_once 'os_software.features.inc';

/**
 * Drupal hooks
 */

/**
 * Implements hook_vsite_og_node_type_info().
 */
function os_software_vsite_og_node_type_info() {
  return array(
    'software_project' => 'group content',
    'software_release' => 'group content',
  );
}

/**
 * Implements hook_form_FORM_ID_form_alter() for software_project_node_form
 *
 * Hides the packaging method field if only one option exists.
 */
function os_software_form_software_project_node_form_alter(&$form, &$form_state, $form_id) {
  $method_field_options = _os_software_packaging_method_options();
  if (sizeof($method_field_options) > 1) return;

  $form['#attached'] = array(
  	'css' => array(
  		'type' => 'file',
  		'data' => drupal_get_path('module', 'os_software') . '/os_software.css',
  	),
  );
}

/**
 * Implements hook_node_insert()
 *
 * Enforces single recommended release per project constraint for "Software Release"
 */
function os_software_node_insert($node) {
  if ($node->type !== 'software_release') return;

  $field_items = field_get_items('node', $node, 'field_software_recommended');
  $recommended_value = $field_items[0]['value'];
  if ($recommended_value === 0) return;

  _os_software_new_recommended_release($node);
}

/**
 * Implements hook_node_update()
 *
 * Enforces single recommended release per project constraint for "Software Release"
 */
function os_software_node_update($node) {
  if ($node->type !== 'software_release') return;

  // Compares original and updated "Recommended" field value
  $node_original = node_load($node->nid);
  if (isset($node_original->title)) { // Only compare values if an original node exists
    $node_updated = $node;
    $rec_field_item_original = field_get_items('node', $node_original, 'field_software_recommended');
    $rec_field_item_updated = field_get_items('node', $node_updated, 'field_software_recommended');
    $rec_value_original = $rec_field_item_original[0]['value'];
    $rec_value_updated = $rec_field_item_updated[0]['value'];
    if ($recommended_value_updated === $recommended_value_original) return;
  }
  // Only updates other Software Release nodes if this value has changed to "Recommended"
  if ($recommended_value_updated === 0) return;

  _os_software_new_recommended_release($node);
}

/**
 * Implements hook_node_presave().
 *
 * Generates the node title for Software Releases
 */
function os_software_node_presave($node) {
  if ($node->type !== 'software_release') return;

  // Sets the node title like "[project-node:title] [release-node:version]"
  $title = _os_software_prepare_release_title($node);
  $node->title = $title;
}

/**
 * Implements hook_node_view()
 *
 * Sets the custom release node title
 */
function os_software_node_view($node, $view_mode, $langcode) {
  if ($node->type !== 'software_project') return;

  $method_field_item = field_get_items('node', $node, 'field_software_method');
  if ($method_field_item[0]['value'] !== 'Manual upload') {
    return;
  }
  // Adds inline contextual links for "Add new > Software Release"
  if (node_access('update', $node)) {
    $node->content['add_release_link'] = array(
      '#theme' => 'menu_local_action',
      '#link' => array(
        'title' => t('Add new software release'),
        'href' => 'node/add/software-release',
        'localized_options' => array(
          'query' => array('field_software_project' => $node->nid),
        ),
      ),
      '#prefix' => '<ul class="field action-links">',
      '#suffix' => '</ul>',
    );
  }
}

/**
 * Implements hook_node_delete()
 */
function os_software_node_delete($node) {
  if ($node->type !== 'software_project') return;

  // Deletes all referencing software release nodes
  _os_software_delete_child_releases($node);
}

/**
 * Implements hook_cron()
 *
 * Invokes hook to automatically create release content (i.e. Rbuild)
 */
function os_software_cron() {
  module_invoke_all('os_software_process_remote_release');
}

/**
 * OpenScholar hooks
 */

/**
 * Implements hook_os_add_new_links_alter()
 *
 * Removes "Add new > Software Release" link from "Add new" contextual links
 */
function os_software_os_add_new_links_alter(&$links) {
  if (isset($links['software_release'])) {
    unset($links['software_release']);
  }
}

/**
 * Implements hook_os_widget()
 *
 * Exposes blocks as OpenScholar widgets.
 */
function os_software_os_widget() {
  $items = array();

  $items['views-os_software_releases-block-1'] = array(
    'module' => 'views',
    'delta' => 'os_software_releases-block_1',
    'region' => 'sidebar_second',
    'weight' => '-10',
    'info' => 'Software Releases',
  );

  return $items;
}

/**
 * Provides default packaging method field option for Software Package nodes
 */
function os_software_os_packaging_method_option() {
  $options = array(
    'Manual upload' => t('Manual upload'),
  );
  return $options;
}

/**
 * Custom functions
 */

/**
 * Finds other recommended releases, marks them "Not recommended"
 */
function _os_software_new_recommended_release($node) {
  // Uses [:os_software_relesases:] view to filter only valid releases for this project
  $view = views_get_view('os_software_releases');
  $view->set_display('page_1');
  $project_field_item = field_get_items('node', $node, 'field_software_project');
  $view->set_arguments(array($project_field_item[0]['target_id']));
  $view->execute();

  foreach ($view->result as $data) {
    if (!isset($node->nid) || $data->nid !== $node->nid) {
      $release_node = node_load($data->nid);
      $wrapper = entity_metadata_wrapper('node', $release_node);
      $wrapper->field_software_recommended[0]->set(0);
      $wrapper->save();
    }
  }
}

/**
 * Finds all child Software Release nodes and deletes them
 */
function _os_software_delete_child_releases($node) {
  // Uses [:os_software_relesases_eva:] view to filter only releases for this project
  $view = views_get_view('os_software_releases');
  $view->set_display('page_1');
  $view->set_arguments(array($node->nid));
  $view->execute();

  $nids = array();
  foreach ($view->result as $data) {
    if (is_numeric($data->nid)) $nids[] = $data->nid;
  }
  node_delete_multiple($nids);
}

/**
 * Prepares Software Release node title for presave and view
 */
function _os_software_prepare_release_title($node) {
  $default_prefix = 'Project Release';

  $project_field = field_get_items('node', $node, 'field_software_project');
  $project_node = node_load($project_field[0]['target_id']);
  $project_title = (!empty($project_node->title)) ? $project_node->title : $default_prefix;

  $version_field = field_get_items('node', $node, 'field_software_version');
  $version = trim($version_field[0]['value']);

  $title_parts = array(
    $project_title,
    $version,
  );

  return implode(' ', $title_parts);
}

/**
 * Invokes hooks to provide packaging method field options
 */
function _os_software_packaging_method_options() {
  $options = module_invoke_all('os_packaging_method_option');
  return $options;
}